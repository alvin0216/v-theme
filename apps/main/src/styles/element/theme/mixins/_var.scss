@mixin inject-themes($theme-maps...) {
  // 按主题聚合变量
  $merged-themes: ();

  @each $map in $theme-maps {
    @each $theme, $variables in $map {
      @if not map-has-key($merged-themes, $theme) {
        $merged-themes: map-merge(
          $merged-themes,
          (
            $theme: (),
          )
        );
      }
      $merged-themes: map-merge(
        $merged-themes,
        (
          $theme: map-merge(map-get($merged-themes, $theme), $variables),
        )
      );
    }
  }

  // 注入聚合后的变量
  @each $theme, $variables in $merged-themes {
    $selector: if($theme == light, ':root', 'html.dark');
    #{$selector} {
      @each $name, $value in $variables {
        --#{$name}: #{$value};
      }
    }
  }
}

// 用法示例：
// .btn {
//   @include set-component-css-var('button', (color: red, padding: 8px));
//  结果：
//   --button-color: red;
//   --button-padding: 8px;
// }
@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    --#{$name}-#{$attribute}: #{$value};
  }
}

/// 主题变量生成器
/// @param {String} $component - 组件名称（如：button）
/// @param {Map} $themes - 主题配置映射表（需包含light主题）
@mixin inject-component($component, $themes) {
  & {
    @include set-component-css-var($component, map-get($themes, 'light'));
  }

  html.dark & {
    @include set-component-css-var($component, map-get($themes, 'dark'));
  }
}

// @mixin data
@mixin dark() {
  html.dark & {
    @content;
  }
}
